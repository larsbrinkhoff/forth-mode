BLK ( -- a-addr )
BLOCK ( u -- a-addr )
BUFFER ( u -- a-addr )
FLUSH ( -- )
LOAD ( i*x u -- j*x )
SAVE-BUFFERS ( -- )
UPDATE ( -- )
EMPTY-BUFFERS ( -- )
LIST ( u -- )
REFILL ( -- flag )
SCR ( -- a-addr )
THRU ( i*x u₁ u₂ -- j*x )
\ ( "ccc<eol>" -- )
! ( x a-addr -- )
# ( ud₁ -- ud₂ )
#> ( xd -- c-addr u )
#S ( ud₁ -- ud₂ )
' ( "<spaces>name" -- xt )
( ( "ccc<paren>" -- )
* ( n₁|u₁ n₂|u₂ -- n₃|u₃ )
*/ ( n₁ n₂ n₃ -- n₄ )
*/MOD ( n₁ n₂ n₃ -- n₄ n₅ )
+ ( n₁|u₁ n₂|u₂ -- n₃|u₃ )
+! ( n|u a-addr -- )
+LOOP ( n -- ) ( R: loop-sys₁ -- |loop-sys₂ ) ( C: do-sys -- )
, ( x -- )
- ( n₁|u₁ n₂|u₂ -- n₃|u₃ )
. ( n -- )
." ( "ccc<quote>" -- )
/ ( n₁ n₂ -- n₃ )
/MOD ( n₁ n₂ -- n₃ n₄ )
0< ( n -- flag )
0= ( x -- flag )
1+ ( n₁|u₁ -- n₂|u₂ )
1- ( n₁|u₁ -- n₂|u₂ )
2! ( x₁ x₂ a-addr -- )
2* ( x₁ -- x₂ )
2/ ( x₁ -- x₂ )
2@ ( a-addr -- x₁ x₂ )
2DROP ( x₁ x₂ -- )
2DUP ( x₁ x₂ -- x₁ x₂ x₁ x₂ )
2OVER ( x₁ x₂ x₃ x₄ -- x₁ x₂ x₃ x₄ x₁ x₂ )
2SWAP ( x₁ x₂ x₃ x₄ -- x₃ x₄ x₁ x₂ )
: ( i*x -- i*x ) ( R: -- nest-sys ) ( C: "<spaces>name" -- colon-sys )
; ( -- ) ( R: nest-sys -- ) ( C: colon-sys -- )
< ( n₁ n₂ -- flag )
<# ( -- )
= ( x₁ x₂ -- flag )
> ( n₁ n₂ -- flag )
>BODY ( xt -- a-addr )
>IN ( -- a-addr )
>NUMBER ( ud₁ c-addr₁ u₁ -- ud₂ c-addr₂ u₂ )
>R ( x -- ) ( R: -- x )
?DUP ( x -- 0 | x x )
@ ( a-addr -- x )
ABORT ( i*x -- ) ( R: j*x -- )
ABORT" ( "ccc<quote>" -- ) ( R: j*x -- | j*x )
ABS ( n -- u )
ACCEPT ( c-addr +n₁ -- +n₂ )
ALIGN ( -- )
ALIGNED ( addr -- a-addr )
ALLOT ( n -- )
AND ( x₁ x₂ -- x₃ )
BASE ( -- a-addr )
BEGIN ( -- ) ( C: -- dest )
BL ( -- char )
C! ( char c-addr -- )
C, ( char -- )
C@ ( c-addr -- char )
CELL+ ( a-addr₁ -- a-addr₂ )
CELLS ( n₁ -- n₂ )
CHAR ( "<spaces>name" -- char )
CHAR+ ( c-addr₁ -- c-addr₂ )
CHARS ( n₁ -- n₂ )
CONSTANT ( x "<spaces>name" -- )
COUNT ( c-addr₁ -- c-addr₂ u )
CR ( -- )
CREATE ( "<spaces>name" -- )
DECIMAL ( -- )
DEPTH ( -- +n )
DO ( n₁|u₁ n₂|u₂ -- ) ( R: -- loop-sys ) ( C: -- do-sys )
DOES> ( -- ) ( R: nest-sys₁ -- ) ( C: colon-sys₁ -- colon-sys₂ )
DROP ( x -- )
DUP ( x -- x x )
ELSE ( -- ) ( C: orig₁ -- orig₂ )
EMIT ( x -- )
ENVIRONMENT? ( c-addr u -- false | i*x true )
EVALUATE ( i*x c-addr u -- j*x )
EXECUTE ( i*x xt -- j*x )
EXIT ( -- ) ( R: nest-sys -- )
FILL ( c-addr u char -- )
FIND ( c-addr -- c-addr 0 | xt 1 | xt -1 )
FM/MOD ( d₁ n₁ -- n₂ n₃ )
HERE ( -- addr )
HOLD ( char -- )
I ( -- n|u ) ( R: loop-sys -- loop-sys )
IF ( x -- ) ( C: -- orig )
IMMEDIATE ( -- )
INVERT ( x₁ -- x₂ )
J ( -- n|u ) ( R: loop-sys₁ loop-sys₂ -- loop-sys₁ loop-sys₂ )
KEY ( -- char )
LEAVE ( -- ) ( R: loop-sys -- )
LITERAL ( x -- )
LOOP ( -- ) ( R: loop-sys₁ -- | loop-sys₂ ) ( C: do-sys -- )
LSHIFT ( x₁ u -- x₂ )
M* ( n₁ n₂ -- d )
MAX ( n₁ n₂ -- n₃ )
MIN ( n₁ n₂ -- n₃ )
MOD ( n₁ n₂ -- n₃ )
MOVE ( addr₁ addr₂ u -- )
NEGATE ( n₁ -- n₂ )
OR ( x₁ x₂ -- x₃ )
OVER ( x₁ x₂ -- x₁ x₂ x₁ )
POSTPONE ( "<spaces>name" -- )
QUIT ( -- ) ( R: i*x -- )
R> ( -- x ) ( R: x -- )
R@ ( -- x ) ( R: x -- x )
RECURSE ( -- )
REPEAT ( -- ) ( C: orig dest -- )
ROT ( x₁ x₂ x₃ -- x₂ x₃ x₁ )
RSHIFT ( x₁ u -- x₂ )
S" ( "ccc<quote>" -- )
S>D ( n -- d )
SIGN ( n -- )
SM/REM ( d₁ n₁ -- n₂ n₃ )
SOURCE ( -- c-addr u )
SPACE ( -- )
SPACES ( n -- )
STATE ( -- a-addr )
SWAP ( x₁ x₂ -- x₂ x₁ )
THEN ( -- ) ( C: orig -- )
TYPE ( c-addr u -- )
U. ( u -- )
U< ( u₁ u₂ -- flag )
UM* ( u₁ u₂ -- ud )
UM/MOD ( ud u₁ -- u₂ u₃ )
UNLOOP ( -- ) ( R: loop-sys -- )
UNTIL ( x -- ) ( C: dest -- )
VARIABLE ( "<spaces>name" -- )
WHILE ( x -- ) ( C: dest -- orig dest )
WORD ( char "<chars>ccc<char>" -- c-addr )
XOR ( x₁ x₂ -- x₃ )
[ ( -- )
['] ( "<spaces>name" -- )
[CHAR] ( "<spaces>name" -- )
] ( -- )
.( ( "ccc<paren>" -- )
.R ( n₁ n₂ -- )
0<> ( x -- flag )
0> ( n -- flag )
2>R ( x₁ x₂ -- ) ( R: -- x₁ x₂ )
2R> ( -- x₁ x₂ ) ( R: x₁ x₂ -- )
2R@ ( -- x₁ x₂ ) ( R: x₁ x₂ -- x₁ x₂ )
:NONAME ( -- xt ) ( R: -- nest-sys ) ( C: -- colon-sys )
<> ( x₁ x₂ -- flag )
?DO ( n₁|u₁ n₂|u₂ -- ) ( R: -- loop-sys ) ( C: -- do-sys )
ACTION-OF ( "<spaces>name" -- xt )
AGAIN ( -- ) ( C: dest -- )
BUFFER: ( u "<spaces>name" -- )
C" ( "ccc<quote>" -- )
CASE ( -- ) ( C: -- case-sys )
COMPILE, ( xt -- )
DEFER ( "<spaces>name" -- )
DEFER! ( xt₂ xt₁ -- )
DEFER@ ( xt₁ -- xt₂ )
ENDCASE ( x -- ) ( C: case-sys -- )
ENDOF ( -- ) ( C: case-sys₁ of-sys -- case-sys₂ )
ERASE ( addr u -- )
FALSE ( -- false )
HEX ( -- )
HOLDS ( c-addr u -- )
IS ( xt "<spaces>name" -- )
MARKER ( "<spaces>name" -- )
NIP ( x₁ x₂ -- x₂ )
OF ( x₁ x₂ -- | x₁ ) ( C: -- of-sys )
PAD ( -- c-addr )
PARSE ( char "ccc<char>" -- c-addr u )
PARSE-NAME ( "<spaces>name<space>" -- c-addr u )
PICK ( x_u…x₁ x₀ u -- x_u…x₁ x₀ x_u )
RESTORE-INPUT ( x_n … x₁ n -- flag )
ROLL ( x_u x_{u-1} … x₀ u -- x_{u-1} … x₀ x_u )
S\" ( "ccc<quote>" -- )
SAVE-INPUT ( -- x_n … x₁ n )
SOURCE-ID ( -- 0 | -1  )
TO ( i*x "<spaces>name" -- )
TRUE ( -- true )
TUCK ( x₁ x₂ -- x₂ x₁ x₂ )
U.R ( u n -- )
U> ( u₁ u₂ -- flag )
UNUSED ( -- u )
VALUE ( x "<spaces>name" -- )
WITHIN ( n₁|u₁ n₂|u₂ n₃|u₃ -- flag )
[COMPILE] ( "<spaces>name" -- )
2CONSTANT ( x₁ x₂ "<spaces>name" -- )
2LITERAL ( x₁ x₂ -- )
2VARIABLE ( "<spaces>name" -- )
D+ ( d₁|ud₁ d₂|ud₂ -- d₃|ud₃ )
D- ( d₁|ud₁ d₂|ud₂ -- d₃|ud₃ )
D. ( d -- )
D.R ( d n -- )
D0< ( d -- flag )
D0= ( xd -- flag )
D2* ( xd₁ -- xd₂ )
D2/ ( xd₁ -- xd₂ )
D< ( d₁ d₂ -- flag )
D= ( xd₁ xd₂ -- flag )
D>S ( d -- n )
DABS ( d -- ud )
DMAX ( d₁ d₂ -- d₃ )
DMIN ( d₁ d₂ -- d₃ )
DNEGATE ( d₁ -- d₂ )
M*/ ( d₁ n₁ +n₂ -- d₂ )
M+ ( d₁|ud₁ n -- d₂|ud₂ )
2ROT ( x₁ x₂ x₃ x₄ x₅ x₆ -- x₃ x₄ x₅ x₆ x₁ x₂ )
2VALUE ( x₁ x₂ "<spaces>name" -- )
DU< ( ud₁ ud₂ -- flag )
CATCH ( i*x xt -- j*x 0 | i*x n )
THROW ( k*x n -- k*x | i*x n )
AT-XY ( u₁ u₂ -- )
KEY? ( -- flag )
PAGE ( -- )
+FIELD ( n₁ n₂ "<spaces>name" -- n₃ )
BEGIN-STRUCTURE ( "<spaces>name" -- struct-sys 0 )
CFIELD: ( n₁ "<spaces>name" -- n₂ )
EKEY ( -- x )
EKEY>CHAR ( x -- x false | char true )
EKEY>FKEY ( x -- u flag )
EKEY? ( -- flag )
EMIT? ( -- flag )
END-STRUCTURE ( struct-sys +n -- )
FIELD: ( n₁ "<spaces>name" -- n₂ )
K-ALT-MASK ( -- u )
K-CTRL-MASK ( -- u )
K-DELETE ( -- u )
K-DOWN ( -- u )
K-END ( -- u )
K-F1 ( -- u )
K-F10 ( -- u )
K-F11 ( -- u )
K-F12 ( -- u )
K-F2 ( -- u )
K-F3 ( -- u )
K-F4 ( -- u )
K-F5 ( -- u )
K-F6 ( -- u )
K-F7 ( -- u )
K-F8 ( -- u )
K-F9 ( -- u )
K-HOME ( -- u )
K-INSERT ( -- u )
K-LEFT ( -- u )
K-NEXT ( -- u )
K-PRIOR ( -- u )
K-RIGHT ( -- u )
K-SHIFT-MASK ( -- u )
K-UP ( -- u )
MS ( u -- )
TIME&DATE ( -- +n₁ +n₂ +n₃ +n₄ +n₅ +n₆ )
BIN ( fam₁ -- fam₂ )
CLOSE-FILE ( fileid -- ior )
CREATE-FILE ( c-addr u fam -- fileid ior )
DELETE-FILE ( c-addr u -- ior )
FILE-POSITION ( fileid -- ud ior )
FILE-SIZE ( fileid -- ud ior )
INCLUDE-FILE ( i*x fileid -- j*x )
INCLUDED ( i*x c-addr u -- j*x )
OPEN-FILE ( c-addr u fam -- fileid ior )
R/O ( -- fam )
R/W ( -- fam )
READ-FILE ( c-addr u₁ fileid -- u₂ ior )
READ-LINE ( c-addr u₁ fileid -- u₂ flag ior )
REPOSITION-FILE ( ud fileid -- ior )
RESIZE-FILE ( ud fileid -- ior )
W/O ( -- fam )
WRITE-FILE ( c-addr u fileid -- ior )
WRITE-LINE ( c-addr u fileid -- ior )
FILE-STATUS ( c-addr u -- x ior )
FLUSH-FILE ( fileid -- ior )
INCLUDE ( i*x "name" -- j*x )
RENAME-FILE ( c-addr₁ u₁ c-addr₂ u₂ -- ior )
REQUIRE ( i*x "name" -- i*x )
REQUIRED ( i*x c-addr u -- i*x )
>FLOAT ( c-addr u -- true | false ) ( F: -- r |~ )
D>F ( d -- ) ( F: -- r )
F! ( f-addr -- ) ( F: r -- )
F* ( r₁ r₂ -- r₃ ) ( F: r₁ r₂ -- r₃ )
F+ ( r₁ r₂ -- r₃ ) ( F: r₁ r₂ -- r₃ )
F- ( r₁ r₂ -- r₃ ) ( F: r₁ r₂ -- r₃ )
F/ ( r₁ r₂ -- r₃ ) ( F: r₁ r₂ -- r₃ )
F0< ( -- flag ) ( F: r -- )
F0= ( -- flag ) ( F: r -- )
F< ( -- flag ) ( F: r₁ r₂ -- )
F>D ( -- d ) ( F: r -- )
F@ ( f-addr -- ) ( F: -- r )
FALIGN ( -- )
FALIGNED ( addr -- f-addr )
FCONSTANT ( "<spaces>name" -- ) ( F: r -- )
FDEPTH ( -- +n )
FDROP ( r -- ) ( F: r -- )
FDUP ( r -- r r ) ( F: r -- r r )
FLITERAL ( r -- ) ( F: r -- )
FLOAT+ ( f-addr₁ -- f-addr₂ )
FLOATS ( n₁ -- n₂ )
FLOOR ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FMAX ( r₁ r₂ -- r₃ ) ( F: r₁ r₂ -- r₃ )
FMIN ( r₁ r₂ -- r₃ ) ( F: r₁ r₂ -- r₃ )
FNEGATE ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FOVER ( r₁ r₂ -- r₁ r₂ r₁ ) ( F: r₁ r₂ -- r₁ r₂ r₁ )
FROT ( r₁ r₂ r₃ -- r₂ r₃ r₁ ) ( F: r₁ r₂ r₃ -- r₂ r₃ r₁ )
FROUND ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FSWAP ( r₁ r₂ -- r₂ r₁ ) ( F: r₁ r₂ -- r₂ r₁ )
FVARIABLE ( "<spaces>name" -- )
REPRESENT ( c-addr u -- n flag₁ flag₂ ) ( F: r -- )
DF! ( df-addr -- ) ( F: r -- )
DF@ ( df-addr -- ) ( F: -- r )
DFALIGN ( -- )
DFALIGNED ( addr -- df-addr )
DFFIELD: ( n₁ "<spaces>name" -- n₂ )
DFLOAT+ ( df-addr₁ -- df-addr₂ )
DFLOATS ( n₁ -- n₂ )
F** ( r₁ r₂ -- r₃ ) ( F: r₁ r₂ -- r₃ )
F. ( -- ) ( F: r -- )
F>S ( -- n ) ( F: r -- )
FABS ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FACOS ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FACOSH ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FALOG ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FASIN ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FASINH ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FATAN ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FATAN2 ( r₁ r₂ -- r₃ ) ( F: r₁ r₂ -- r₃ )
FATANH ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FCOS ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FCOSH ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FE. ( -- ) ( F: r -- )
FEXP ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FEXPM1 ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FFIELD: ( n₁ "<spaces>name" -- n₂ )
FLN ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FLNP1 ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FLOG ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FS. ( -- ) ( F: r -- )
FSIN ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FSINCOS ( r₁ -- r₂ r₃ ) ( F: r₁ -- r₂ r₃ )
FSINH ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FSQRT ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FTAN ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FTANH ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FTRUNC ( r₁ -- r₂ ) ( F: r₁ -- r₂ )
FVALUE ( "<spaces>name" -- ) ( F: r -- )
F~ ( -- flag ) ( F: r₁ r₂ r₃ -- )
PRECISION ( -- u )
S>F ( n -- ) ( F: -- r )
SET-PRECISION ( u -- )
SF! ( sf-addr -- ) ( F: r -- )
SF@ ( sf-addr -- ) ( F: -- r )
SFALIGN ( -- )
SFALIGNED ( addr -- sf-addr )
SFFIELD: ( n₁ "<spaces>name" -- n₂ )
SFLOAT+ ( sf-addr₁ -- sf-addr₂ )
SFLOATS ( n₁ -- n₂ )
(LOCAL) ( c-addr u -- )
LOCALS| ( "<spaces>name₁" "<spaces>name₂" … "<spaces>name_n" "|" -- )
{: ( i*x "<spaces>ccc \texttt{:\}}" -- )
ALLOCATE ( u -- a-addr ior )
FREE ( a-addr -- ior )
RESIZE ( a-addr₁ u -- a-addr₂ ior )
DEFINITIONS ( -- )
FORTH-WORDLIST ( -- wid )
GET-CURRENT ( -- wid )
GET-ORDER ( -- wid_n … wid₁ n )
SEARCH-WORDLIST ( c-addr u wid -- 0 | xt 1 | xt -1 )
SET-CURRENT ( wid -- )
SET-ORDER ( wid_n … wid₁ n -- )
WORDLIST ( -- wid )
ALSO ( -- )
FORTH ( -- )
ONLY ( -- )
ORDER ( -- )
PREVIOUS ( -- )
-TRAILING ( c-addr u₁ -- c-addr u₂ )
/STRING ( c-addr₁ u₁ n -- c-addr₂ u₂ )
BLANK ( c-addr u -- )
CMOVE ( c-addr₁ c-addr₂ u -- )
CMOVE> ( c-addr₁ c-addr₂ u -- )
COMPARE ( c-addr₁ u₁ c-addr₂ u₂ -- n )
SEARCH ( c-addr₁ u₁ c-addr₂ u₂ -- c-addr₃ u₃ flag )
SLITERAL ( c-addr₁ u -- )
REPLACES ( c-addr₁ u₁ c-addr₂ u₂ -- )
SUBSTITUTE ( c-addr₁ u₁ c-addr₂ u₂ -- c-addr₂ u₃ n )
UNESCAPE ( c-addr₁ u₁ c-addr₂ -- c-addr₂ u₂ )
.S ( -- )
? ( a-addr -- )
DUMP ( addr u -- )
SEE ( "<spaces>name" -- )
WORDS ( -- )
;CODE ( -- ) ( R: nest-sys -- ) ( C: colon-sys -- )
AHEAD ( -- ) ( C: -- orig )
ASSEMBLER ( -- )
BYE ( -- )
CODE ( "<spaces>name" -- )
CS-PICK ( u -- ) ( C: dest_u … orig₀|dest₀ -- dest_u … orig₀|dest₀ dest_u )
CS-ROLL ( u -- ) ( C: orig_u|dest_u orig_{u-1}|dest_{u-1} … orig₀|dest₀ -- orig_{u-1}|dest_{u-1} … orig₀|dest₀ orig_u|dest_u )
EDITOR ( -- )
FORGET ( "<spaces>name" -- )
N>R ( i*n +n -- ) ( R: -- j*x +n )
NAME>COMPILE ( nt -- x xt )
NAME>INTERPRET ( nt -- xt|0 )
NAME>STRING ( nt -- c-addr u )
NR> ( -- i*x +n ) ( R: j*x +n -- )
SYNONYM ( "<spaces>newname" "<spaces>oldname" -- )
TRAVERSE-WORDLIST ( i*x xt wid -- j*x )
[DEFINED] ( "<spaces>name …" -- flag )
[ELSE] ( "<spaces>name …" -- )
[IF] ( flag|flag "<spaces>name …" -- )
[THEN] ( -- )
[UNDEFINED] ( "<spaces>name …" -- flag )
X-SIZE ( xc-addr u₁ -- u₂ )
XC!+ ( xchar xc-addr₁ -- xc-addr₂ )
XC!+? ( xchar xc-addr₁ u₁ -- xc-addr₂ u₂ flag )
XC, ( xchar -- )
XC-SIZE ( xchar -- u )
XC@+ ( xc-addr₁ -- xc-addr₂ xchar )
XCHAR+ ( xc-addr₁ -- xc-addr₂ )
XEMIT ( xchar -- )
XKEY ( -- xchar )
XKEY? ( -- flag )
+X/STRING ( xc-addr₁ u₁ -- xc-addr₂ u₂ )
-TRAILING-GARBAGE ( xc-addr u₁ -- xc-addr u₂ )
EKEY>XCHAR ( x -- xchar true | x false )
X-WIDTH ( xc-addr u -- n )
XC-WIDTH ( xchar -- n )
XCHAR- ( xc-addr₁ -- xc-addr₂ )
XHOLD ( xchar -- )
X\STRING- ( xc-addr u₁ -- xc-addr u₂ )
